name: cd

# 2023年2月より、GitHub は新規リポジトリのデフォルトの GitHub Actions 権限を read-only に変更しました。
# しかし、古いリポジトリ（2023年2月以前に作成されたもの）は デフォルトで read-write の権限を持っている可能性があります。
# そのため、セキュリティの観点から「明示的に最小権限を設定するべき」と指摘されている ということです。
permissions:
  contents: read
  pull-requests: write

on:
  workflow_dispatch:

jobs:
  ci:
    uses: ./.github/workflows/ci.yml

  deploy:
    needs: [ci]
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # OIDC トークンの取得を許可
      contents: read   # リポジトリの内容を読み取る

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Make Output Directory
        run: mkdir -p ./.next

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ACTIONS_OIDC_ROLE_ARN }}
          aws-region: ap-northeast-1
          role-session-name: github-actions

      - name: Login to ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.AWS_SSO_ACCOUNT_ID }}.dkr.ecr.ap-northeast-1.amazonaws.com

      # linux/arm64 でビルドするために QEMU をセットアップする
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # docker/build-push-action@v6 でプラットフォームを linux/arm64 でビルドすると linux/amd64 のマニフェストが求められてエラーになるため自前のシェルで実行する
      - name: Build Next.js with Docker
        run: |
          docker build --platform linux/arm64 -t ${{secrets.AWS_ECR_REPO_NAME}} . -f ./apps/web/Dockerfile
          docker create --name extract-container ${{secrets.AWS_ECR_REPO_NAME}}
          mkdir -p ./dist/_next
          docker cp extract-container:/app/apps/web/.next/static ./dist/_next/static
          docker cp extract-container:/app/apps/web/public/. ./dist
          docker tag ${{secrets.AWS_ECR_REPO_NAME}}:latest ${{ secrets.AWS_SSO_ACCOUNT_ID }}.dkr.ecr.ap-northeast-1.amazonaws.com/${{secrets.AWS_ECR_REPO_NAME}}:latest
          docker push ${{ secrets.AWS_SSO_ACCOUNT_ID }}.dkr.ecr.ap-northeast-1.amazonaws.com/${{secrets.AWS_ECR_REPO_NAME}}:latest
          docker rm extract-container

      - name: Upload to S3
        run: |
          aws s3 sync ./dist s3://${{ secrets.AWS_S3_BUCKET_NAME }}/ --delete --cache-control "public, max-age=31536000, immutable"

      - name: Deploy to AWS Lambda
        run: |
          aws lambda update-function-code \
            --function-name ${{secrets.AWS_LAMBDA_FUNC_NAME}} \
            --image-uri ${{ secrets.AWS_SSO_ACCOUNT_ID }}.dkr.ecr.ap-northeast-1.amazonaws.com/${{secrets.AWS_ECR_REPO_NAME}}:latest

      # すべてのキャッシュを削除するため将来的にはコストを考えて調整する
      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.AWS_CLOUD_FRONT_DIST_ID }} \
            --paths "/*"
